"""
Django settings for stickynotes project.
Generated by 'django-admin startproject' using Django 5.1.1.
Docs:
- Settings: https://docs.djangoproject.com/en/5.1/topics/settings/
- Full settings list: https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from pathlib import Path
from environ import Env

# Initialize environment variables
env = Env()
BASE_DIR = Path(__file__).resolve().parent.parent
env.read_env(str(BASE_DIR / '.env'))

# Basic Configuration
SECRET_KEY = env('SECRET_KEY', default='your-default-secret-key')
DEBUG = env.bool('DEBUG', default=False)
ALLOWED_HOSTS = env.list('ALLOWED_HOSTS', default=['*'])


# Application Definition
INSTALLED_APPS = [
    # Local apps
    "blog.apps.BlogConfig",
    "users.apps.UsersConfig",

    # Third-party apps
    "crispy_forms",
    "crispy_bootstrap5",
    "tinymce",
    "cloudinary_storage",
    "django.contrib.staticfiles",

    # Django built-in apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "cloudinary",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "stickynotes.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "blog.context_processors.website_list",
            ],
        },
    },
]

WSGI_APPLICATION = "stickynotes.wsgi.application"

# Database Configuration
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# Password Validation
AUTH_PASSWORD_VALIDATORS = [
    {"NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"},
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
LANGUAGE_CODE = "en-us"
TIME_ZONE = "UTC"
USE_I18N = True
USE_TZ = True

# Update static files config
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Add whitenoise for static files
MIDDLEWARE.insert(1, 'whitenoise.middleware.WhiteNoiseMiddleware')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

# Cloudinary Storage for Media
DEFAULT_FILE_STORAGE = 'cloudinary_storage.storage.MediaCloudinaryStorage'

CLOUDINARY_STORAGE = {
    'CLOUD_NAME': env('CLOUDINARY_CLOUD_NAME', default=None),
    'API_KEY': env('CLOUDINARY_API_KEY', default=None),
    'API_SECRET': env('CLOUDINARY_API_SECRET', default=None),
}
print("Cloudinary name:", env('CLOUDINARY_CLOUD_NAME'))


# Email Configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_HOST_USER = env('USER_EMAIL', default='')
EMAIL_HOST_PASSWORD = env('USER_PASS', default='')

# Authentication
LOGIN_REDIRECT_URL = 'blog-home'
LOGIN_URL = 'login'

# Crispy Forms
CRISPY_ALLOWED_TEMPLATE_PACKS = 'bootstrap5'
CRISPY_TEMPLATE_PACK = 'bootstrap5'

# TinyMCE Configuration
TINYMCE_DEFAULT_CONFIG = {
    "menubar": "file edit view insert format tools table help",
    "plugins": (
        "advlist autolink lists link image charmap print preview anchor searchreplace visualblocks code "
        "fullscreen insertdatetime media table paste code help wordcount spellchecker"
    ),
    "toolbar": (
        "undo redo | bold italic underline | fontselect fontsizeselect formatselect | alignleft "
        "aligncenter alignright alignjustify | outdent indent | numlist bullist checklist | forecolor "
        "backcolor casechange permanentpen formatpainter removeformat | pagebreak | charmap emoticons | "
        "fullscreen preview save print | insertfile image media pageembed template link anchor codesample | "
        "a11ycheck ltr rtl | showcomments addcomment code"
    ),
    "image_advtab": True,
    "images_upload_url": "/upload_image/",
    "automatic_uploads": True,
    "file_picker_types": "image",
    "custom_undo_redo_levels": 10,
}

# Default Auto Field
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
